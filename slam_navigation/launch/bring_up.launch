<launch>
    <arg name="use_camera" default="true"/>
    <arg name="use_arm" default="false"/>
    <arg name="use_slam" default="true"/>
    <arg name="use_base" default="true"/>
    <arg name="torque_control" default="false"/>
    <arg name="use_sim" default="false"/>
    <arg name="teleop" default="false"/>
    <arg name="use_rviz" default="false"/>
    <arg name="base" default="kobuki"/> <!-- Options: create and kobuki -->

    <param name="use_camera" value="$(arg use_camera)"/>
    <param name="use_arm" value="$(arg use_arm)"/>
    <param name="use_slam" value="$(arg use_slam)"/>
    <param name="use_sim" value="$(arg use_sim)"/>
    <param name="use_base" value="$(arg use_base)"/>
    <param name="torque_control" value="$(arg torque_control)"/>
    <param name="teleop" value="$(arg teleop)"/>



    <group unless="$(arg use_sim)"> 
<node name="listener" pkg="roscpp_tutorials" type="listener"  />
        <group if="$(arg use_camera)">
        
            <include file="$(find realsense2_camera)/launch/rs_rgbd.launch">
                <arg name="enable_pointcloud" value="false"/>
            </include>
            <include file="$(find flir_boson_usb)/launch/flir_boson_rectified.launch">
                <arg name="dev" value="/dev/video3"/>
            </include>
            <!-- <node name="usb_cam" pkg="usb_cam" type="usb_cam_node" output="screen" >
                <param name="video_device" value="/dev/video3"/>
                <param name="image_width" value="640" />
                <param name="image_height" value="480" />
                <param name="framerate" value="60" />
                <param name="pixel_format" value="yuyv" />
                <param name="camera_frame_id" value="usb_cam" />
                <param name="io_method" value="mmap"/>
            </node> -->
            <!-- <include file="$(find slam_navigation)/launch/depth_to_scan.launch">
            </include> -->
            <node pkg="pointcloud_to_laserscan" type="pointcloud_to_laserscan_node" name="pointcloud_to_laserscan">
                <!-- See all params at http://wiki.ros.org/pointcloud_to_laserscan -->
                
                <!-- Min and max height to sample from depth data - these values worked for my drone -->
                <param name="min_height" value="0.3"/>
                <param name="max_height" value="3"/>
                
                <!-- Min and max range range of generated laser scan - set this to match your depth sensor -->
                <param name="range_min" value="0.2"/>
                <param name="range_max" value="10.0"/>
                
                <!-- Frame of your depth sensor -->
                <param name="target_frame" value="camera_link"/>

                <!-- Topic from which to read PointCloud2 -->
                <remap from="cloud_in" to="/camera/depth_registered/points"/>
                
                <!-- Topic to which LaserScan will be published -->
                <remap from="scan" to="/scan"/>
            </node>
            <!-- <node name="init_config" pkg="slam_navigation"
              type="init.py"  output="screen"/> -->
        </group>

        <group if="$(arg use_base)" >

            <include file="$(find slam_navigation)/launch/main_base.launch">
                <arg name="base" value="$(arg base)"/>
            </include>

        </group>
         <group if="$(arg use_slam)" >
            <include file="$(find slam_navigation)/launch/rtabmap.launch">
            </include>
        </group>

        <group unless="$(arg teleop)">
            <group if="$(eval arg('use_arm') or arg('use_camera') or arg('use_slam'))">
                <include file="$(find locobot_control)/launch/dynamixel_controllers.launch"/>
            </group>
        </group>

        <node name="calibration_tf_broadcaster" pkg="locobot_calibration"
              type="calibration_publish_transforms.py"/>

    </group>

    <!-- Gazebo -->


    <!-- Common -->
    
 <group if="$(eval arg('use_base') or arg('use_sim'))" >
        <include file="$(find slam_navigation)/launch/move_base.launch">
            <arg name="use_map" value="$(arg use_slam)"/>
            <arg name="base" value="$(arg base)"/>
        </include>
    </group> 


    <group if="$(eval base =='create')">
        <include file="$(find locobot_lite_moveit_config)/launch/demo.launch">
            <arg name="use_rviz" value="$(arg use_rviz)"/>
        </include>
    </group>

    <group if="$(eval base =='kobuki')">
        <include file="$(find locobot_moveit_config)/launch/demo.launch">
            <arg name="use_rviz" value="$(arg use_rviz)"/>
        </include>
    </group>

    <!-- <node pkg="slam_navigation" name="map_server1" type="map_server.py" output="screen">  -->
<!-- </node> -->
    <!--<include file="$(find slam_navigation)/launch/amcl_demo.launch">
            </include> -->
</launch>
